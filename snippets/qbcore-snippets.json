{
  "Import QBCore": {
    "prefix": ["qbcore", "importqb", "qbimport"],
    "body": ["local QBCore = exports['qb-core']:GetCoreObject()"],
    "description": "Import QBCore locally."
  },

  "QBCore Shared": {
    "prefix": ["qbshared"],
    "body": ["shared_scripts {", "\t'@qb-core/import.lua'", "}"],
    "description": "FxManifest Shared QBCore. (Resource Import)"
  },

  "QBCore Get Player": {
    "prefix": ["getplayer", "gp"],
    "body": ["local xPlayer = QBCore.Functions.GetPlayer(${1:source})"],
    "description": "Get the Player. (Server Side)"
  },

  "QBCore Get Player Data": {
    "prefix": ["getplayerdata", "gpd"],
    "body": ["local ${name:playerData} = QBCore.Functions.GetPlayerData()"],
    "description": "Get the player data. (Client Side)"
  },

  "QBCore FXManifest": {
    "prefix": ["qbmanifest"],
    "body": [
        "$LINE_COMMENT ${1:resourceName} Resource\n",
        "fx_version 'cerulean'",
        "game 'gta5'\n",
        "client_script '${2:client/client.lua}'",
        "server_script '${3:server/server.lua}'\n",
        "shared_scripts {",
        "\t'@qb-core/import.lua'",
        "}"
    ]
  },

  "QBCore Remove Money": {
    "prefix": ["rpm", "removemoney"],
    "body": [
      "${1:xPlayer}.Functions.RemoveMoney(${2:moneytype}, ${3:amount}, ${1:reason})"
    ],
    "description": "Remove money from a player. (Server Side)"
  },

  "QBCore OxMySql Insert Sync": {
    "prefix": ["insertsync", "oxmyis"],
    "body": ["local res = exports.oxmysql:insertSync('${1:query}', {})"],
    "description": "Insert Sync. QBCore/OxMySql"
  },

  "QBCore OxMySql Insert Async": {
    "prefix": ["oxmyinsert", "oxmyi"],
    "body": ["local res = exports.oxmysql:insert('${1:query}', {})"],
    "description": "Insert. QBCore/OxMySql"
  },

  "QBCore OxMySql Execute": {
    "prefix": ["oxmyexe", "oxmyexecute"],
    "body": ["local res = exports.oxmysql:execute('${1:query}', {})"],
    "description": "Execute. QBCore/OxMySql"
  },

  "QBCore OxMySql Execute Sync": {
    "prefix": ["oxmyexesync", "oxmyexecutesync"],
    "body": ["local res = exports.oxmysql:executeSync('${1:query}', {})"],
    "description": "Execute Sync. QBCore/OxMySql"
  },

  "QBCore OxMySql Update": {
      "prefix": ["oxmyupdate"],
      "body": ["local res = exports.oxmysql:update('${1:query}', {})"],
      "description": "Update. QBCore/OxMySql"
  },

  "QBCore OxMySql Update Sync": {
      "prefix": ["oxmyupdate", "qbupdate"],
      "body": ["local res = exports.oxmysql:updateSync('${1:query}', {})"],
      "description": "Update Sync. QBCore/OxMySql"
   },

   "QBCore Add Command": {
       "prefix": ["qbaddcommand", "qbadd"],
       "body": [
           "QBCore.Commands.Add(${1:commandName}, ${2:commandDescription}, {${3:args}}, ${4:argsRequired?}, function(source, args)",
        "\t${6:-- Code..}",
    "end, ${5:needsPermission?})"],
    
        "description": "QBCore Add Command. (Server Side)"
   },

   "QBCore Create Callback": {
       "prefix": ["qbcreatecallback", "qbccb"],
       "body": ["QBCore.Functions.CreateCallback(${1:name}, function(${2:args}", "\t${3:-- Code..}", "end)"],
       "description": "QBCore Create Callback. (Server Side)"
   },


   "QBCore Get Coords Of Entity": {
       "prefix": ["qbcoords", "qbgetcoords"],
       "body": ["local entityCoords = QBCore.Functions.GetCoords(${1:entity})"],
       "description": "QBCore Get Entity Coords. (Server Side)"
   },

   "QBCore Get Identifier": {
       "prefix": ["qbgetid", "qbid", "qbgetidentifier"],
       "body": ["local playerIdentification = QBCore.Functions.GetIdentifier(${1:source}, ${2:'bank'})"],
       "description": "QBCore Get Player Identification. (Server Side)"
    },

    "QBCore Get Source": {
        "prefix": ["qbgetsource", "qbsource"],
        "body": "local foundSource = QBCore.Functions.GetSource(${1:identifier}",
        "description": "QBCore Get Source From Identifier. (Server Side)"
    },

    "QBCore Get Player By Citizen Id": {
        "prefix": ["qbgetplayerbycitizenid", "qbgetbycit"],
        "body": "local xPlayer = QBCore.Functions.GetPlayerByCitizenId(${1:citizenid})",
        "description": "QBCore Get Player From Citizen Id. (Server Side)"
    },

    "QBCore Get Player By Phone": {
        "prefix": ["qbgetbyphone", "qbgetplayerbyphone"],
        "body": ["local xPlayer = QBCore.Functions.GetPlayerByPhone(${1:phoneNumber}"],
        "description": "QBCore Get Player From Phone Number. (Server Side)"
    },

    "QBCore Get Players": {
        "prefix": ["qbgetplayers"],
        "body": ["local players = QBCore.Functions.GetPlayers()"],
        "description": "QBCore Get All Player ID's In The Server. (Server Side) [DEPRECATED]"
    },

    "QBCore Get QB Players": {
        "prefix": ["qbgetqbplayers"],
        "body": "local qbPlayers = QBCore.Functions.GetQBPlayers()",
        "description": "QBCore Get All Active Players On The Server. (Server Side) [PREFERRED]"
    },

    "QBCore Trigger Callback": {
        "prefix": ["qbtc", "qbtriggercallback"],
        "body": ["QBCore.Functions.TriggerCallback(${1:name}, ${2:sourceForServerSide}, {$3:cb}"],
        "description": "QBCore Trigger A Callback. (Client & Server Side.)"
    },

    "QBCore Create Usable Item": {
        "prefix": ["qbcui", "qbcreateusableitem"],
        "body": ["QBCore.Functions.CreateUsableItem(${1:item}, function(${2:args})", "\t${4:-- Code..}", "end)"],
        "description": "QBCore Create Usable Item. (Server Side)"
    },

    "QBCore Can Use Item": {
        "prefix": ["qbcanui", "qbcanuseitem"], 
        "body": ["local canUseCertainItem = QBCore.Functions.CanUseItem(${1:item})"],
        "description": "QBCore Can Use Item? (Server Side)"
    },
    
    "QBCore Use Item": {
        "prefix": ["qbuseitem", "qbui"],
        "body": "QBCore.Functions.UseItem(${1:source}, ${2:item})",
        "description": "QBCore Use Item. (Server Side)"
    },

    "QBCore Kick": {
        "prefix": ["qbkick"],
        "body": "QBCore.Functions.Kick(${1:source}, '${2:reason}', ${3:setKickReason}, ${4:deferrals})",
        "description": "QBCore Kick. (Server Side)"
    },

    "QBCore Add Permission": {
        "prefix": ["qbaddpermission"],
        "body": "QBCore.Functions.AddPermission(${1:source}, ${2:permission})",
        "description": "QBCore Add Permission. (Server Side)"
    },

    "QBCore Remove Permission": {
      "prefix": ["qbremovepermission"],
      "body": [
        "QBCore.Functions.RemovePermission(${1:source})"
      ],
      "description": "QBCore Remove Permission. (Server Side)"
    },

    "QBCore Has Permission": {
      "prefix": ["qbhaspermission"],
      "body": "local doesPlayerHavePermission = QBCore.Functions.HasPermission(${1:source}, ${2:permissionName})",
      "description": "QBCore Has Permission. (Server Side)"
    },

    "QBCore Get Permission": {
      "prefix": "qbgetpermission",
      "body": ["local ${1:foundPermission} = QBCore.Functions.GetPermission(${2:source})"],
      "description": "QBCore Get Permission. (Server Side)"
    },

    "QBCore Is Player Banned": {
      "prefix": ["qbisplayerbanned"],
      "body": ["local isPlayerBanned = QBCore.Functions.IsPlayerBanned(${1:source}) -- Boolean"],
      "description": "QBCore Is Player Banned. (Server Side)"
    },

    "QBCore Is License In Use": {
      "prefix": "qbislicenseinuse",
      "body": ["local isLicenseInUse = QBCore.Functions.IsLicenseInUse(${1:license})"],
      "description": "QBCore Is License In Use. (Server Side)"
    },

    "QBCore Event Trigger Callback": {
      "prefix": ["qbetc", "qbetriggercallback"],
      "body": ["TriggerServerEvent('QBCore:Server:TriggerCallback', ${1:name})"],
      "description": "QBCore Trigger Callback. [EVENT] (Server Side)"
    },

    "QBCore Event Update Player": {
      "prefix": ["qbeupdateplayer"],
      "body": ["TriggerServerEvent('QBCore:Client:UpdatePlayer')"],
      "description": "QBCore Update Player. [EVENT] (Server Side)"
    },

    "QBCore Event Set Meta Data": {
      "prefix": ["qbesetmetadata"],
      "body": "TriggerServerEvent('QBCore:Server:SetMetaData', ${1:meta}, ${2:data})",
      "description": "QBCore Set Meta Data. [EVENT] (Server Side)"
    },
    
    "QBCore Event Toggle Duty": {
      "prefix": "qbetoggleduty",
      "body": "TriggerServerEvent('QBCore:ToggleDuty') -- needs source.",
      "description": "QBCore Toggle Duty. [EVENT] (Server Side)"
    },

    "QBCore Event Use Item": {
      "prefix": ["qbeuseitem"],
      "body": "TriggerServerEvent('QBCore:Server:UseItem', ${1:item})",
      "description": "QBCore Use Item. [NOT RECOMMENDED BY DOCS] [EVENT] (Server Side)"
    },
    
    "QBCore Event Remove Item": {
      "prefix": ["qberemoveitem"],
      "body": "TriggerServerEvent('QBCore:Server:UseItem', ${1:item})",
      "description": "QBCore Event Item. [NOT RECOMMENDED BY DOCS] [EVENT] (Server Side)"
    },

    "QBCore Event Add Item": {
      "prefix": ["qbeadditem"],
      "body": "TriggerServerEvent('QBCore:Server:AddItem', ${1:itemName}, ${2:amount}, ${3:slot}, ${4:info})",
      "description": "QBCore Add Item. [NOT RECOMMENDED BY DOCS] [EVENT] (Server Side)"
    },

    "QBCore Call Command": {
      "prefix": ["qbecallcommand"],
      "body": "TriggerServerEvent('${1:name}, ${2:args})'",
      "description": "QBCore Call Command. [EVENT] (Server Side)"
    },

    "QBCore Event Notify": {
      "prefix": "qbenotify",
      "body": "TriggerClientEvent('QBCore:Notify', ${1:text}, ${2:type}, ${3:length})",
      "description": "QBCore Notify. [EVENT]"
    }
}